package com.glsebastiany.smartcatalogspl.instanceditlanta.data.db;

import java.util.List;
import java.util.ArrayList;
import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.SqlUtils;
import de.greenrobot.dao.internal.DaoConfig;

import com.glsebastiany.smartcatalogspl.instanceditlanta.data.db.Item;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "ITEM".
*/
public class ItemDao extends AbstractDao<Item, Long> {

    public static final String TABLENAME = "ITEM";

    /**
     * Properties of entity Item.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Name = new Property(1, String.class, "name", false, "NAME");
        public final static Property Price = new Property(2, float.class, "price", false, "PRICE");
        public final static Property Description = new Property(3, String.class, "description", false, "DESCRIPTION");
        public final static Property ImageUrl = new Property(4, String.class, "imageUrl", false, "IMAGE_URL");
        public final static Property IsPromoted = new Property(5, boolean.class, "isPromoted", false, "IS_PROMOTED");
        public final static Property IsSale = new Property(6, boolean.class, "isSale", false, "IS_SALE");
        public final static Property IsAssembled = new Property(7, boolean.class, "isAssembled", false, "IS_ASSEMBLED");
        public final static Property PreviousPrice = new Property(8, float.class, "previousPrice", false, "PREVIOUS_PRICE");
        public final static Property CategoryId = new Property(9, long.class, "categoryId", false, "CATEGORY_ID");
        public final static Property CreationDate = new Property(10, java.util.Date.class, "creationDate", false, "CREATION_DATE");
    };

    private DaoSession daoSession;


    public ItemDao(DaoConfig config) {
        super(config);
    }
    
    public ItemDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"ITEM\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"NAME\" TEXT NOT NULL ," + // 1: name
                "\"PRICE\" REAL NOT NULL ," + // 2: price
                "\"DESCRIPTION\" TEXT NOT NULL ," + // 3: description
                "\"IMAGE_URL\" TEXT NOT NULL ," + // 4: imageUrl
                "\"IS_PROMOTED\" INTEGER NOT NULL ," + // 5: isPromoted
                "\"IS_SALE\" INTEGER NOT NULL ," + // 6: isSale
                "\"IS_ASSEMBLED\" INTEGER NOT NULL ," + // 7: isAssembled
                "\"PREVIOUS_PRICE\" REAL NOT NULL ," + // 8: previousPrice
                "\"CATEGORY_ID\" INTEGER NOT NULL ," + // 9: categoryId
                "\"CREATION_DATE\" INTEGER NOT NULL );"); // 10: creationDate
        // Add Indexes
        db.execSQL("CREATE INDEX " + constraint + "IDX_ITEM_CATEGORY_ID ON ITEM" +
                " (\"CATEGORY_ID\");");
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"ITEM\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Item entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindString(2, entity.getName());
        stmt.bindDouble(3, entity.getPrice());
        stmt.bindString(4, entity.getDescription());
        stmt.bindString(5, entity.getImageUrl());
        stmt.bindLong(6, entity.getIsPromoted() ? 1L: 0L);
        stmt.bindLong(7, entity.getIsSale() ? 1L: 0L);
        stmt.bindLong(8, entity.getIsAssembled() ? 1L: 0L);
        stmt.bindDouble(9, entity.getPreviousPrice());
        stmt.bindLong(10, entity.getCategoryId());
        stmt.bindLong(11, entity.getCreationDate().getTime());
    }

    @Override
    protected void attachEntity(Item entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public Item readEntity(Cursor cursor, int offset) {
        Item entity = new Item( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getString(offset + 1), // name
            cursor.getFloat(offset + 2), // price
            cursor.getString(offset + 3), // description
            cursor.getString(offset + 4), // imageUrl
            cursor.getShort(offset + 5) != 0, // isPromoted
            cursor.getShort(offset + 6) != 0, // isSale
            cursor.getShort(offset + 7) != 0, // isAssembled
            cursor.getFloat(offset + 8), // previousPrice
            cursor.getLong(offset + 9), // categoryId
            new java.util.Date(cursor.getLong(offset + 10)) // creationDate
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Item entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setName(cursor.getString(offset + 1));
        entity.setPrice(cursor.getFloat(offset + 2));
        entity.setDescription(cursor.getString(offset + 3));
        entity.setImageUrl(cursor.getString(offset + 4));
        entity.setIsPromoted(cursor.getShort(offset + 5) != 0);
        entity.setIsSale(cursor.getShort(offset + 6) != 0);
        entity.setIsAssembled(cursor.getShort(offset + 7) != 0);
        entity.setPreviousPrice(cursor.getFloat(offset + 8));
        entity.setCategoryId(cursor.getLong(offset + 9));
        entity.setCreationDate(new java.util.Date(cursor.getLong(offset + 10)));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(Item entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(Item entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
    private String selectDeep;

    protected String getSelectDeep() {
        if (selectDeep == null) {
            StringBuilder builder = new StringBuilder("SELECT ");
            SqlUtils.appendColumns(builder, "T", getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T0", daoSession.getCategoryDao().getAllColumns());
            builder.append(" FROM ITEM T");
            builder.append(" LEFT JOIN CATEGORY T0 ON T.\"CATEGORY_ID\"=T0.\"_id\"");
            builder.append(' ');
            selectDeep = builder.toString();
        }
        return selectDeep;
    }
    
    protected Item loadCurrentDeep(Cursor cursor, boolean lock) {
        Item entity = loadCurrent(cursor, 0, lock);
        int offset = getAllColumns().length;

        Category category = loadCurrentOther(daoSession.getCategoryDao(), cursor, offset);
         if(category != null) {
            entity.setCategory(category);
        }

        return entity;    
    }

    public Item loadDeep(Long key) {
        assertSinglePk();
        if (key == null) {
            return null;
        }

        StringBuilder builder = new StringBuilder(getSelectDeep());
        builder.append("WHERE ");
        SqlUtils.appendColumnsEqValue(builder, "T", getPkColumns());
        String sql = builder.toString();
        
        String[] keyArray = new String[] { key.toString() };
        Cursor cursor = db.rawQuery(sql, keyArray);
        
        try {
            boolean available = cursor.moveToFirst();
            if (!available) {
                return null;
            } else if (!cursor.isLast()) {
                throw new IllegalStateException("Expected unique result, but count was " + cursor.getCount());
            }
            return loadCurrentDeep(cursor, true);
        } finally {
            cursor.close();
        }
    }
    
    /** Reads all available rows from the given cursor and returns a list of new ImageTO objects. */
    public List<Item> loadAllDeepFromCursor(Cursor cursor) {
        int count = cursor.getCount();
        List<Item> list = new ArrayList<Item>(count);
        
        if (cursor.moveToFirst()) {
            if (identityScope != null) {
                identityScope.lock();
                identityScope.reserveRoom(count);
            }
            try {
                do {
                    list.add(loadCurrentDeep(cursor, false));
                } while (cursor.moveToNext());
            } finally {
                if (identityScope != null) {
                    identityScope.unlock();
                }
            }
        }
        return list;
    }
    
    protected List<Item> loadDeepAllAndCloseCursor(Cursor cursor) {
        try {
            return loadAllDeepFromCursor(cursor);
        } finally {
            cursor.close();
        }
    }
    

    /** A raw-style query where you can pass any WHERE clause and arguments. */
    public List<Item> queryDeep(String where, String... selectionArg) {
        Cursor cursor = db.rawQuery(getSelectDeep() + where, selectionArg);
        return loadDeepAllAndCloseCursor(cursor);
    }
 
}
