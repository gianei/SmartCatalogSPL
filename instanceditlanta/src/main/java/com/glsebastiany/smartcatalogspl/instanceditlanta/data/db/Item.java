/*
 *     SmartCatalogSPL, an Android catalog Software Product Line
 *     Copyright (c) 2016 Gianei Leandro Sebastiany
 *
 *     This program is free software: you can redistribute it and/or modify
 *     it under the terms of the GNU General Public License as published by
 *     the Free Software Foundation, either version 3 of the License, or
 *     (at your option) any later version.
 *
 *     This program is distributed in the hope that it will be useful,
 *     but WITHOUT ANY WARRANTY; without even the implied warranty of
 *     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *     GNU General Public License for more details.
 *
 *     You should have received a copy of the GNU General Public License
 *     along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

package com.glsebastiany.smartcatalogspl.instanceditlanta.data.db;

import com.glsebastiany.smartcatalogspl.core.data.ItemModel;
import de.greenrobot.dao.DaoException;

// THIS CODE IS GENERATED BY greenDAO, EDIT ONLY INSIDE THE "KEEP"-SECTIONS

// KEEP INCLUDES - put your custom includes here
import com.glsebastiany.smartcatalogspl.instanceditlanta.data.db.DaoSession;

import java.util.Date;
// KEEP INCLUDES END
/**
 * Entity mapped to table "ITEM".
 */
public class Item implements ItemModel {

    private Long id;
    /** Not-null value. */
    private String name;
    private float price;
    /** Not-null value. */
    private String description;
    /** Not-null value. */
    private String imageUrl;
    private boolean isPromoted;
    private boolean isSale;
    private boolean isAssembled;
    private float previousPrice;
    private long categoryId;
    /** Not-null value. */
    private java.util.Date creationDate;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient ItemDao myDao;

    private Category category;
    private Long category__resolvedKey;


    // KEEP FIELDS - put your custom fields here
    private static final long DAYS_SPAN_TO_BE_NEW_ITEM = 30;
    // KEEP FIELDS END

    public Item() {
    }

    public Item(Long id) {
        this.id = id;
    }

    public Item(Long id, String name, float price, String description, String imageUrl, boolean isPromoted, boolean isSale, boolean isAssembled, float previousPrice, long categoryId, java.util.Date creationDate) {
        this.id = id;
        this.name = name;
        this.price = price;
        this.description = description;
        this.imageUrl = imageUrl;
        this.isPromoted = isPromoted;
        this.isSale = isSale;
        this.isAssembled = isAssembled;
        this.previousPrice = previousPrice;
        this.categoryId = categoryId;
        this.creationDate = creationDate;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getItemDao() : null;
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    /** Not-null value. */
    public String getName() {
        return name;
    }

    /** Not-null value; ensure this value is available before it is saved to the database. */
    public void setName(String name) {
        this.name = name;
    }

    public float getPrice() {
        return price;
    }

    public void setPrice(float price) {
        this.price = price;
    }

    /** Not-null value. */
    public String getDescription() {
        return description;
    }

    /** Not-null value; ensure this value is available before it is saved to the database. */
    public void setDescription(String description) {
        this.description = description;
    }

    /** Not-null value. */
    public String getImageUrl() {
        return imageUrl;
    }

    /** Not-null value; ensure this value is available before it is saved to the database. */
    public void setImageUrl(String imageUrl) {
        this.imageUrl = imageUrl;
    }

    public boolean getIsPromoted() {
        return isPromoted;
    }

    public void setIsPromoted(boolean isPromoted) {
        this.isPromoted = isPromoted;
    }

    public boolean getIsSale() {
        return isSale;
    }

    public void setIsSale(boolean isSale) {
        this.isSale = isSale;
    }

    public boolean getIsAssembled() {
        return isAssembled;
    }

    public void setIsAssembled(boolean isAssembled) {
        this.isAssembled = isAssembled;
    }

    public float getPreviousPrice() {
        return previousPrice;
    }

    public void setPreviousPrice(float previousPrice) {
        this.previousPrice = previousPrice;
    }

    public long getCategoryId() {
        return categoryId;
    }

    public void setCategoryId(long categoryId) {
        this.categoryId = categoryId;
    }

    /** Not-null value. */
    public java.util.Date getCreationDate() {
        return creationDate;
    }

    /** Not-null value; ensure this value is available before it is saved to the database. */
    public void setCreationDate(java.util.Date creationDate) {
        this.creationDate = creationDate;
    }

    /** To-one relationship, resolved on first access. */
    public Category getCategory() {
        long __key = this.categoryId;
        if (category__resolvedKey == null || !category__resolvedKey.equals(__key)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            CategoryDao targetDao = daoSession.getCategoryDao();
            Category categoryNew = targetDao.load(__key);
            synchronized (this) {
                category = categoryNew;
            	category__resolvedKey = __key;
            }
        }
        return category;
    }

    public void setCategory(Category category) {
        if (category == null) {
            throw new DaoException("To-one property 'categoryId' has not-null constraint; cannot set to-one to null");
        }
        synchronized (this) {
            this.category = category;
            categoryId = category.getId();
            category__resolvedKey = categoryId;
        }
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

    // KEEP METHODS - put your custom methods here
    public String getStringId(){
        return id.toString();
    }

    public boolean getIsNew(){
        Date newItemFromDate = new Date();
        newItemFromDate.setTime(new Date().getTime() - getNewItemMilisecondsRange());
        return getCreationDate() != null && getCreationDate().after(newItemFromDate);
    }

    public boolean mustShowPreviousPrice(){
        return (isPromoted || isSale)
                && getPrice() < getPreviousPrice();
    }

    private static long getNewItemMilisecondsRange() {
        return 1000L * 60L * 60L * 24l * DAYS_SPAN_TO_BE_NEW_ITEM;
    }
    // KEEP METHODS END

}
